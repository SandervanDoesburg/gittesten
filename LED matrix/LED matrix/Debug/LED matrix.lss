
LED matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003dc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000f2  00802000  000003dc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000714  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000717  00000000  00000000  00000d66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000286  00000000  00000000  0000147d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000491  00000000  00000000  00001703  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000320  00000000  00000000  00001bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f2  00000000  00000000  00001f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  0000210e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
   2:	00 00       	nop
   4:	17 c1       	rjmp	.+558    	; 0x234 <__bad_interrupt>
   6:	00 00       	nop
   8:	15 c1       	rjmp	.+554    	; 0x234 <__bad_interrupt>
   a:	00 00       	nop
   c:	13 c1       	rjmp	.+550    	; 0x234 <__bad_interrupt>
   e:	00 00       	nop
  10:	11 c1       	rjmp	.+546    	; 0x234 <__bad_interrupt>
  12:	00 00       	nop
  14:	0f c1       	rjmp	.+542    	; 0x234 <__bad_interrupt>
  16:	00 00       	nop
  18:	0d c1       	rjmp	.+538    	; 0x234 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	0b c1       	rjmp	.+534    	; 0x234 <__bad_interrupt>
  1e:	00 00       	nop
  20:	09 c1       	rjmp	.+530    	; 0x234 <__bad_interrupt>
  22:	00 00       	nop
  24:	07 c1       	rjmp	.+526    	; 0x234 <__bad_interrupt>
  26:	00 00       	nop
  28:	05 c1       	rjmp	.+522    	; 0x234 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	03 c1       	rjmp	.+518    	; 0x234 <__bad_interrupt>
  2e:	00 00       	nop
  30:	01 c1       	rjmp	.+514    	; 0x234 <__bad_interrupt>
  32:	00 00       	nop
  34:	ff c0       	rjmp	.+510    	; 0x234 <__bad_interrupt>
  36:	00 00       	nop
  38:	fd c0       	rjmp	.+506    	; 0x234 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	fb c0       	rjmp	.+502    	; 0x234 <__bad_interrupt>
  3e:	00 00       	nop
  40:	f9 c0       	rjmp	.+498    	; 0x234 <__bad_interrupt>
  42:	00 00       	nop
  44:	f7 c0       	rjmp	.+494    	; 0x234 <__bad_interrupt>
  46:	00 00       	nop
  48:	f5 c0       	rjmp	.+490    	; 0x234 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	f3 c0       	rjmp	.+486    	; 0x234 <__bad_interrupt>
  4e:	00 00       	nop
  50:	f1 c0       	rjmp	.+482    	; 0x234 <__bad_interrupt>
  52:	00 00       	nop
  54:	ef c0       	rjmp	.+478    	; 0x234 <__bad_interrupt>
  56:	00 00       	nop
  58:	ed c0       	rjmp	.+474    	; 0x234 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	eb c0       	rjmp	.+470    	; 0x234 <__bad_interrupt>
  5e:	00 00       	nop
  60:	e9 c0       	rjmp	.+466    	; 0x234 <__bad_interrupt>
  62:	00 00       	nop
  64:	e7 c0       	rjmp	.+462    	; 0x234 <__bad_interrupt>
  66:	00 00       	nop
  68:	e5 c0       	rjmp	.+458    	; 0x234 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	e3 c0       	rjmp	.+454    	; 0x234 <__bad_interrupt>
  6e:	00 00       	nop
  70:	e1 c0       	rjmp	.+450    	; 0x234 <__bad_interrupt>
  72:	00 00       	nop
  74:	df c0       	rjmp	.+446    	; 0x234 <__bad_interrupt>
  76:	00 00       	nop
  78:	dd c0       	rjmp	.+442    	; 0x234 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	db c0       	rjmp	.+438    	; 0x234 <__bad_interrupt>
  7e:	00 00       	nop
  80:	d9 c0       	rjmp	.+434    	; 0x234 <__bad_interrupt>
  82:	00 00       	nop
  84:	d7 c0       	rjmp	.+430    	; 0x234 <__bad_interrupt>
  86:	00 00       	nop
  88:	d5 c0       	rjmp	.+426    	; 0x234 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	d3 c0       	rjmp	.+422    	; 0x234 <__bad_interrupt>
  8e:	00 00       	nop
  90:	d1 c0       	rjmp	.+418    	; 0x234 <__bad_interrupt>
  92:	00 00       	nop
  94:	cf c0       	rjmp	.+414    	; 0x234 <__bad_interrupt>
  96:	00 00       	nop
  98:	cd c0       	rjmp	.+410    	; 0x234 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	cb c0       	rjmp	.+406    	; 0x234 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	c9 c0       	rjmp	.+402    	; 0x234 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	c7 c0       	rjmp	.+398    	; 0x234 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	c5 c0       	rjmp	.+394    	; 0x234 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	c3 c0       	rjmp	.+390    	; 0x234 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	c1 c0       	rjmp	.+386    	; 0x234 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	bf c0       	rjmp	.+382    	; 0x234 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	bd c0       	rjmp	.+378    	; 0x234 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	bb c0       	rjmp	.+374    	; 0x234 <__bad_interrupt>
  be:	00 00       	nop
  c0:	b9 c0       	rjmp	.+370    	; 0x234 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	b7 c0       	rjmp	.+366    	; 0x234 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	b5 c0       	rjmp	.+362    	; 0x234 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	b3 c0       	rjmp	.+358    	; 0x234 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	b1 c0       	rjmp	.+354    	; 0x234 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	af c0       	rjmp	.+350    	; 0x234 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	ad c0       	rjmp	.+346    	; 0x234 <__bad_interrupt>
  da:	00 00       	nop
  dc:	ab c0       	rjmp	.+342    	; 0x234 <__bad_interrupt>
  de:	00 00       	nop
  e0:	a9 c0       	rjmp	.+338    	; 0x234 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	a7 c0       	rjmp	.+334    	; 0x234 <__bad_interrupt>
  e6:	00 00       	nop
  e8:	a5 c0       	rjmp	.+330    	; 0x234 <__bad_interrupt>
  ea:	00 00       	nop
  ec:	a3 c0       	rjmp	.+326    	; 0x234 <__bad_interrupt>
  ee:	00 00       	nop
  f0:	a1 c0       	rjmp	.+322    	; 0x234 <__bad_interrupt>
  f2:	00 00       	nop
  f4:	9f c0       	rjmp	.+318    	; 0x234 <__bad_interrupt>
  f6:	00 00       	nop
  f8:	9d c0       	rjmp	.+314    	; 0x234 <__bad_interrupt>
  fa:	00 00       	nop
  fc:	9b c0       	rjmp	.+310    	; 0x234 <__bad_interrupt>
  fe:	00 00       	nop
 100:	99 c0       	rjmp	.+306    	; 0x234 <__bad_interrupt>
 102:	00 00       	nop
 104:	97 c0       	rjmp	.+302    	; 0x234 <__bad_interrupt>
 106:	00 00       	nop
 108:	95 c0       	rjmp	.+298    	; 0x234 <__bad_interrupt>
 10a:	00 00       	nop
 10c:	93 c0       	rjmp	.+294    	; 0x234 <__bad_interrupt>
 10e:	00 00       	nop
 110:	91 c0       	rjmp	.+290    	; 0x234 <__bad_interrupt>
 112:	00 00       	nop
 114:	8f c0       	rjmp	.+286    	; 0x234 <__bad_interrupt>
 116:	00 00       	nop
 118:	8d c0       	rjmp	.+282    	; 0x234 <__bad_interrupt>
 11a:	00 00       	nop
 11c:	8b c0       	rjmp	.+278    	; 0x234 <__bad_interrupt>
 11e:	00 00       	nop
 120:	89 c0       	rjmp	.+274    	; 0x234 <__bad_interrupt>
 122:	00 00       	nop
 124:	87 c0       	rjmp	.+270    	; 0x234 <__bad_interrupt>
 126:	00 00       	nop
 128:	85 c0       	rjmp	.+266    	; 0x234 <__bad_interrupt>
 12a:	00 00       	nop
 12c:	83 c0       	rjmp	.+262    	; 0x234 <__bad_interrupt>
 12e:	00 00       	nop
 130:	81 c0       	rjmp	.+258    	; 0x234 <__bad_interrupt>
 132:	00 00       	nop
 134:	7f c0       	rjmp	.+254    	; 0x234 <__bad_interrupt>
 136:	00 00       	nop
 138:	7d c0       	rjmp	.+250    	; 0x234 <__bad_interrupt>
 13a:	00 00       	nop
 13c:	7b c0       	rjmp	.+246    	; 0x234 <__bad_interrupt>
 13e:	00 00       	nop
 140:	79 c0       	rjmp	.+242    	; 0x234 <__bad_interrupt>
 142:	00 00       	nop
 144:	77 c0       	rjmp	.+238    	; 0x234 <__bad_interrupt>
 146:	00 00       	nop
 148:	75 c0       	rjmp	.+234    	; 0x234 <__bad_interrupt>
 14a:	00 00       	nop
 14c:	73 c0       	rjmp	.+230    	; 0x234 <__bad_interrupt>
 14e:	00 00       	nop
 150:	71 c0       	rjmp	.+226    	; 0x234 <__bad_interrupt>
 152:	00 00       	nop
 154:	6f c0       	rjmp	.+222    	; 0x234 <__bad_interrupt>
 156:	00 00       	nop
 158:	6d c0       	rjmp	.+218    	; 0x234 <__bad_interrupt>
 15a:	00 00       	nop
 15c:	6b c0       	rjmp	.+214    	; 0x234 <__bad_interrupt>
 15e:	00 00       	nop
 160:	69 c0       	rjmp	.+210    	; 0x234 <__bad_interrupt>
 162:	00 00       	nop
 164:	67 c0       	rjmp	.+206    	; 0x234 <__bad_interrupt>
 166:	00 00       	nop
 168:	65 c0       	rjmp	.+202    	; 0x234 <__bad_interrupt>
 16a:	00 00       	nop
 16c:	63 c0       	rjmp	.+198    	; 0x234 <__bad_interrupt>
 16e:	00 00       	nop
 170:	61 c0       	rjmp	.+194    	; 0x234 <__bad_interrupt>
 172:	00 00       	nop
 174:	5f c0       	rjmp	.+190    	; 0x234 <__bad_interrupt>
 176:	00 00       	nop
 178:	5d c0       	rjmp	.+186    	; 0x234 <__bad_interrupt>
 17a:	00 00       	nop
 17c:	5b c0       	rjmp	.+182    	; 0x234 <__bad_interrupt>
 17e:	00 00       	nop
 180:	59 c0       	rjmp	.+178    	; 0x234 <__bad_interrupt>
 182:	00 00       	nop
 184:	57 c0       	rjmp	.+174    	; 0x234 <__bad_interrupt>
 186:	00 00       	nop
 188:	55 c0       	rjmp	.+170    	; 0x234 <__bad_interrupt>
 18a:	00 00       	nop
 18c:	53 c0       	rjmp	.+166    	; 0x234 <__bad_interrupt>
 18e:	00 00       	nop
 190:	51 c0       	rjmp	.+162    	; 0x234 <__bad_interrupt>
 192:	00 00       	nop
 194:	4f c0       	rjmp	.+158    	; 0x234 <__bad_interrupt>
 196:	00 00       	nop
 198:	4d c0       	rjmp	.+154    	; 0x234 <__bad_interrupt>
 19a:	00 00       	nop
 19c:	4b c0       	rjmp	.+150    	; 0x234 <__bad_interrupt>
 19e:	00 00       	nop
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <__bad_interrupt>
 1a2:	00 00       	nop
 1a4:	47 c0       	rjmp	.+142    	; 0x234 <__bad_interrupt>
 1a6:	00 00       	nop
 1a8:	45 c0       	rjmp	.+138    	; 0x234 <__bad_interrupt>
 1aa:	00 00       	nop
 1ac:	43 c0       	rjmp	.+134    	; 0x234 <__bad_interrupt>
 1ae:	00 00       	nop
 1b0:	41 c0       	rjmp	.+130    	; 0x234 <__bad_interrupt>
 1b2:	00 00       	nop
 1b4:	3f c0       	rjmp	.+126    	; 0x234 <__bad_interrupt>
 1b6:	00 00       	nop
 1b8:	3d c0       	rjmp	.+122    	; 0x234 <__bad_interrupt>
 1ba:	00 00       	nop
 1bc:	3b c0       	rjmp	.+118    	; 0x234 <__bad_interrupt>
 1be:	00 00       	nop
 1c0:	39 c0       	rjmp	.+114    	; 0x234 <__bad_interrupt>
 1c2:	00 00       	nop
 1c4:	37 c0       	rjmp	.+110    	; 0x234 <__bad_interrupt>
 1c6:	00 00       	nop
 1c8:	35 c0       	rjmp	.+106    	; 0x234 <__bad_interrupt>
 1ca:	00 00       	nop
 1cc:	33 c0       	rjmp	.+102    	; 0x234 <__bad_interrupt>
 1ce:	00 00       	nop
 1d0:	31 c0       	rjmp	.+98     	; 0x234 <__bad_interrupt>
 1d2:	00 00       	nop
 1d4:	2f c0       	rjmp	.+94     	; 0x234 <__bad_interrupt>
 1d6:	00 00       	nop
 1d8:	2d c0       	rjmp	.+90     	; 0x234 <__bad_interrupt>
 1da:	00 00       	nop
 1dc:	2b c0       	rjmp	.+86     	; 0x234 <__bad_interrupt>
 1de:	00 00       	nop
 1e0:	29 c0       	rjmp	.+82     	; 0x234 <__bad_interrupt>
 1e2:	00 00       	nop
 1e4:	27 c0       	rjmp	.+78     	; 0x234 <__bad_interrupt>
 1e6:	00 00       	nop
 1e8:	25 c0       	rjmp	.+74     	; 0x234 <__bad_interrupt>
 1ea:	00 00       	nop
 1ec:	23 c0       	rjmp	.+70     	; 0x234 <__bad_interrupt>
 1ee:	00 00       	nop
 1f0:	21 c0       	rjmp	.+66     	; 0x234 <__bad_interrupt>
 1f2:	00 00       	nop
 1f4:	1f c0       	rjmp	.+62     	; 0x234 <__bad_interrupt>
 1f6:	00 00       	nop
 1f8:	1d c0       	rjmp	.+58     	; 0x234 <__bad_interrupt>
	...

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	df e3       	ldi	r29, 0x3F	; 63
 204:	de bf       	out	0x3e, r29	; 62
 206:	cd bf       	out	0x3d, r28	; 61
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	ec ed       	ldi	r30, 0xDC	; 220
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a2 3f       	cpi	r26, 0xF2	; 242
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	02 d0       	rcall	.+4      	; 0x236 <main>
 232:	d2 c0       	rjmp	.+420    	; 0x3d8 <_exit>

00000234 <__bad_interrupt>:
 234:	e5 ce       	rjmp	.-566    	; 0x0 <__vectors>

00000236 <main>:
};



int main(void)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	ae 97       	sbiw	r28, 0x2e	; 46
 240:	cd bf       	out	0x3d, r28	; 61
 242:	de bf       	out	0x3e, r29	; 62
	spi_init();
 244:	b6 d0       	rcall	.+364    	; 0x3b2 <spi_init>
	
	PORTC.DIRSET = PIN0_bm;														
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	e0 e4       	ldi	r30, 0x40	; 64
 24a:	f6 e0       	ldi	r31, 0x06	; 6
 24c:	81 83       	std	Z+1, r24	; 0x01
	
	int stringlength, temp, index, rowcol = 0;
	
	unsigned int buffer[] = {0,0,0,0,0,0,0,0};
 24e:	fe 01       	movw	r30, r28
 250:	31 96       	adiw	r30, 0x01	; 1
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	df 01       	movw	r26, r30
 256:	1d 92       	st	X+, r1
 258:	8a 95       	dec	r24
 25a:	e9 f7       	brne	.-6      	; 0x256 <main+0x20>
		
	char message[] = " MATTHIJS VISSER ";
 25c:	82 e1       	ldi	r24, 0x12	; 18
 25e:	e0 e0       	ldi	r30, 0x00	; 0
 260:	f0 e2       	ldi	r31, 0x20	; 32
 262:	de 01       	movw	r26, r28
 264:	51 96       	adiw	r26, 0x11	; 17
 266:	01 90       	ld	r0, Z+
 268:	0d 92       	st	X+, r0
 26a:	8a 95       	dec	r24
 26c:	e1 f7       	brne	.-8      	; 0x266 <main+0x30>
		
	stringlength = strlen(message);
 26e:	de 01       	movw	r26, r28
 270:	51 96       	adiw	r26, 0x11	; 17
 272:	fd 01       	movw	r30, r26
 274:	01 90       	ld	r0, Z+
 276:	00 20       	and	r0, r0
 278:	e9 f7       	brne	.-6      	; 0x274 <main+0x3e>
 27a:	31 97       	sbiw	r30, 0x01	; 1
 27c:	9f 01       	movw	r18, r30
 27e:	2a 1b       	sub	r18, r26
 280:	3b 0b       	sbc	r19, r27
 282:	2d a7       	std	Y+45, r18	; 0x2d
 284:	3e a7       	std	Y+46, r19	; 0x2e
	
	while(1) 
	{
		for (int a=0; a<stringlength; a++)
 286:	1b a6       	std	Y+43, r1	; 0x2b
 288:	1c a6       	std	Y+44, r1	; 0x2c
								spi_transfer((lookupcol[rowcol][i]));

								spi_transfer((buffer[i]));

			
								PORTC_OUT = PIN0_bm;
 28a:	0f 2e       	mov	r0, r31
 28c:	f4 e4       	ldi	r31, 0x44	; 68
 28e:	cf 2e       	mov	r12, r31
 290:	f6 e0       	ldi	r31, 0x06	; 6
 292:	df 2e       	mov	r13, r31
 294:	f0 2d       	mov	r31, r0
 296:	33 24       	eor	r3, r3
 298:	33 94       	inc	r3
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},		// Spatie	
};



int main(void)
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	8b a3       	std	Y+35, r24	; 0x23
 2a0:	9c a3       	std	Y+36, r25	; 0x24
 2a2:	89 a7       	std	Y+41, r24	; 0x29
 2a4:	9a a7       	std	Y+42, r25	; 0x2a
 2a6:	5d c0       	rjmp	.+186    	; 0x362 <main+0x12c>
		{
			for (int scroll = 0; scroll < 8; scroll++)
			{
				for (int shift = 0; shift < 8; shift++)
					{
						index = message[a];
 2a8:	af a1       	ldd	r26, Y+39	; 0x27
 2aa:	b8 a5       	ldd	r27, Y+40	; 0x28
 2ac:	8c 91       	ld	r24, X
 2ae:	90 e0       	ldi	r25, 0x00	; 0
						
						if (index == 32)
 2b0:	80 32       	cpi	r24, 0x20	; 32
 2b2:	91 05       	cpc	r25, r1
 2b4:	19 f0       	breq	.+6      	; 0x2bc <main+0x86>
						{
							index = index - 6;			// spatie
						}
						else
						{
							index = index - 65;			// A t/m Z
 2b6:	81 54       	subi	r24, 0x41	; 65
 2b8:	91 09       	sbc	r25, r1
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <main+0x8a>
					{
						index = message[a];
						
						if (index == 32)
						{
							index = index - 6;			// spatie
 2bc:	8a e1       	ldi	r24, 0x1A	; 26
 2be:	90 e0       	ldi	r25, 0x00	; 0
						else
						{
							index = index - 65;			// A t/m Z
						}
						
						temp = lookuprow[index][shift];
 2c0:	fc 01       	movw	r30, r24
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	ee 0f       	add	r30, r30
 2cc:	ff 1f       	adc	r31, r31
 2ce:	e8 0d       	add	r30, r8
 2d0:	f9 1d       	adc	r31, r9
 2d2:	ee 5e       	subi	r30, 0xEE	; 238
 2d4:	ff 4d       	sbci	r31, 0xDF	; 223
 2d6:	20 81       	ld	r18, Z
 2d8:	30 e0       	ldi	r19, 0x00	; 0
						
						buffer[shift] = (buffer[shift] << 1)|(temp >> ((7)-scroll));
 2da:	0d a0       	ldd	r0, Y+37	; 0x25
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <main+0xac>
 2de:	35 95       	asr	r19
 2e0:	27 95       	ror	r18
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <main+0xa8>
 2e6:	f3 01       	movw	r30, r6
 2e8:	80 81       	ld	r24, Z
 2ea:	91 81       	ldd	r25, Z+1	; 0x01
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	82 2b       	or	r24, r18
 2f2:	93 2b       	or	r25, r19
 2f4:	d3 01       	movw	r26, r6
 2f6:	8d 93       	st	X+, r24
 2f8:	9d 93       	st	X+, r25
 2fa:	3d 01       	movw	r6, r26
 2fc:	72 01       	movw	r14, r4
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},		// Spatie	
};



int main(void)
 2fe:	09 a5       	ldd	r16, Y+41	; 0x29
 300:	1a a5       	ldd	r17, Y+42	; 0x2a

						
							for(int i=0; i<8; i++)
							{
								
								spi_transfer((lookupcol[rowcol][i]));
 302:	f7 01       	movw	r30, r14
 304:	81 91       	ld	r24, Z+
 306:	7f 01       	movw	r14, r30
 308:	5d d0       	rcall	.+186    	; 0x3c4 <spi_transfer>

								spi_transfer((buffer[i]));
 30a:	d8 01       	movw	r26, r16
 30c:	8c 91       	ld	r24, X
 30e:	0e 5f       	subi	r16, 0xFE	; 254
 310:	1f 4f       	sbci	r17, 0xFF	; 255
 312:	58 d0       	rcall	.+176    	; 0x3c4 <spi_transfer>

			
								PORTC_OUT = PIN0_bm;
 314:	f6 01       	movw	r30, r12
 316:	30 82       	st	Z, r3
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 318:	8d ee       	ldi	r24, 0xED	; 237
 31a:	92 e0       	ldi	r25, 0x02	; 2
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <main+0xe6>
 320:	00 c0       	rjmp	.+0      	; 0x322 <main+0xec>
 322:	00 00       	nop
						temp = lookuprow[index][shift];
						
						buffer[shift] = (buffer[shift] << 1)|(temp >> ((7)-scroll));

						
							for(int i=0; i<8; i++)
 324:	ea 14       	cp	r14, r10
 326:	fb 04       	cpc	r15, r11
 328:	61 f7       	brne	.-40     	; 0x302 <main+0xcc>
	{
		for (int a=0; a<stringlength; a++)
		{
			for (int scroll = 0; scroll < 8; scroll++)
			{
				for (int shift = 0; shift < 8; shift++)
 32a:	9f ef       	ldi	r25, 0xFF	; 255
 32c:	89 1a       	sub	r8, r25
 32e:	99 0a       	sbc	r9, r25
 330:	a8 e0       	ldi	r26, 0x08	; 8
 332:	8a 16       	cp	r8, r26
 334:	91 04       	cpc	r9, r1
 336:	09 f0       	breq	.+2      	; 0x33a <main+0x104>
 338:	b7 cf       	rjmp	.-146    	; 0x2a8 <main+0x72>
 33a:	ed a1       	ldd	r30, Y+37	; 0x25
 33c:	fe a1       	ldd	r31, Y+38	; 0x26
 33e:	31 97       	sbiw	r30, 0x01	; 1
 340:	ed a3       	std	Y+37, r30	; 0x25
 342:	fe a3       	std	Y+38, r31	; 0x26
	
	while(1) 
	{
		for (int a=0; a<stringlength; a++)
		{
			for (int scroll = 0; scroll < 8; scroll++)
 344:	31 96       	adiw	r30, 0x01	; 1
 346:	41 f0       	breq	.+16     	; 0x358 <main+0x122>
};



int main(void)
{
 348:	66 24       	eor	r6, r6
 34a:	63 94       	inc	r6
 34c:	71 2c       	mov	r7, r1
 34e:	6c 0e       	add	r6, r28
 350:	7d 1e       	adc	r7, r29
 352:	81 2c       	mov	r8, r1
 354:	91 2c       	mov	r9, r1
 356:	a8 cf       	rjmp	.-176    	; 0x2a8 <main+0x72>
		
	stringlength = strlen(message);
	
	while(1) 
	{
		for (int a=0; a<stringlength; a++)
 358:	8b a5       	ldd	r24, Y+43	; 0x2b
 35a:	9c a5       	ldd	r25, Y+44	; 0x2c
 35c:	01 96       	adiw	r24, 0x01	; 1
 35e:	8b a7       	std	Y+43, r24	; 0x2b
 360:	9c a7       	std	Y+44, r25	; 0x2c
 362:	ab a5       	ldd	r26, Y+43	; 0x2b
 364:	bc a5       	ldd	r27, Y+44	; 0x2c
 366:	ed a5       	ldd	r30, Y+45	; 0x2d
 368:	fe a5       	ldd	r31, Y+46	; 0x2e
 36a:	ae 17       	cp	r26, r30
 36c:	bf 07       	cpc	r27, r31
 36e:	2c f0       	brlt	.+10     	; 0x37a <main+0x144>
 370:	1e 16       	cp	r1, r30
 372:	1f 06       	cpc	r1, r31
 374:	ec f4       	brge	.+58     	; 0x3b0 <main+0x17a>
 376:	1b a6       	std	Y+43, r1	; 0x2b
 378:	1c a6       	std	Y+44, r1	; 0x2c
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},		// Spatie	
};



int main(void)
 37a:	27 e0       	ldi	r18, 0x07	; 7
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	2d a3       	std	Y+37, r18	; 0x25
 380:	3e a3       	std	Y+38, r19	; 0x26
		{
			for (int scroll = 0; scroll < 8; scroll++)
			{
				for (int shift = 0; shift < 8; shift++)
					{
						index = message[a];
 382:	81 e1       	ldi	r24, 0x11	; 17
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	8c 0f       	add	r24, r28
 388:	9d 1f       	adc	r25, r29
 38a:	ab a5       	ldd	r26, Y+43	; 0x2b
 38c:	bc a5       	ldd	r27, Y+44	; 0x2c
 38e:	8a 0f       	add	r24, r26
 390:	9b 1f       	adc	r25, r27
 392:	8f a3       	std	Y+39, r24	; 0x27
 394:	98 a7       	std	Y+40, r25	; 0x28
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},		// Spatie	
};



int main(void)
 396:	0f 2e       	mov	r0, r31
 398:	f2 ef       	ldi	r31, 0xF2	; 242
 39a:	af 2e       	mov	r10, r31
 39c:	f0 e2       	ldi	r31, 0x20	; 32
 39e:	bf 2e       	mov	r11, r31
 3a0:	f0 2d       	mov	r31, r0
 3a2:	0f 2e       	mov	r0, r31
 3a4:	fa ee       	ldi	r31, 0xEA	; 234
 3a6:	4f 2e       	mov	r4, r31
 3a8:	f0 e2       	ldi	r31, 0x20	; 32
 3aa:	5f 2e       	mov	r5, r31
 3ac:	f0 2d       	mov	r31, r0
 3ae:	cc cf       	rjmp	.-104    	; 0x348 <main+0x112>
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <main+0x17a>

000003b2 <spi_init>:
#include <avr/io.h>
#include "spi.h"

void spi_init(void)
{
	PORTC.DIR |= SPI_SCK_bm|SPI_MOSI_bm|SPI_SS_bm;
 3b2:	e0 e4       	ldi	r30, 0x40	; 64
 3b4:	f6 e0       	ldi	r31, 0x06	; 6
 3b6:	80 81       	ld	r24, Z
 3b8:	80 6b       	ori	r24, 0xB0	; 176
 3ba:	80 83       	st	Z, r24
	SPIC.CTRL = (!SPI_CLK2X_bm) |				// no double clock speed
 3bc:	80 e5       	ldi	r24, 0x50	; 80
 3be:	80 93 c0 08 	sts	0x08C0, r24
 3c2:	08 95       	ret

000003c4 <spi_transfer>:


	
uint8_t spi_transfer(uint8_t data)
{
	SPIC.DATA = data;
 3c4:	e0 ec       	ldi	r30, 0xC0	; 192
 3c6:	f8 e0       	ldi	r31, 0x08	; 8
 3c8:	83 83       	std	Z+3, r24	; 0x03
	while ( ! (SPIC.STATUS & (SPI_IF_bm)) );
 3ca:	82 81       	ldd	r24, Z+2	; 0x02
 3cc:	88 23       	and	r24, r24
 3ce:	ec f7       	brge	.-6      	; 0x3ca <spi_transfer+0x6>
	
	return SPIC.DATA;
 3d0:	e0 ec       	ldi	r30, 0xC0	; 192
 3d2:	f8 e0       	ldi	r31, 0x08	; 8
 3d4:	83 81       	ldd	r24, Z+3	; 0x03
 3d6:	08 95       	ret

000003d8 <_exit>:
 3d8:	f8 94       	cli

000003da <__stop_program>:
 3da:	ff cf       	rjmp	.-2      	; 0x3da <__stop_program>
